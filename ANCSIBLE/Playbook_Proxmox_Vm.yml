---
- name: Gestion d'une VM Proxmox (Backup & Restore) + Création/Snapshot via API Token
  hosts: localhost
  gather_facts: false

  vars:
    # Paramètres Proxmox
    proxmox_host: "192.168.1.9"
    api_token_id: "root@pam!root"
    api_token_secret: "8175ef4f-9791-46a2-8f76-16eb18f652de"
    node: "pve"

    # Paramètres VM à gérer
    vmid: 102
    hostname: "SRV-PRIV"
    cores: 2
    memory: 2048
    disk_size: "10G"
    iso: "local:iso/debian-12.iso"

    # Paramètres de backup
    backup_storage: "PROD-1TO2"    # Stockage où sera placé le backup
    backup_mode: "snapshot"        # "snapshot" ou "stop"
    backup_compress: "zstd"        # "zstd", "lzo", etc.
    remove_backup: 0               # 0 => ne supprime pas d'anciens backups

    # Paramètres de restauration
    restore_new_vmid: 200          # ID de la VM restaurée
    restore_storage: "PROD-1TO2"   # Stockage cible pour le disque restauré

  tasks:

    ########################################################################
    # 1) EXEMPLE : CRÉER LA VM via API Proxmox (community.general.proxmox)
    ########################################################################
    - name: Créer une VM (si elle n'existe pas déjà)
      community.general.proxmox:
        api_host: "{{ proxmox_host }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        node: "{{ node }}"
        vmid: "{{ vmid }}"
        hostname: "{{ hostname }}"
        cores: "{{ cores }}"
        memory: "{{ memory }}"
        disk_size: "{{ disk_size }}"
        iso: "{{ iso }}"
        state: present
      delegate_to: localhost
      register: create_vm

    - name: Afficher le résultat de la création
      debug:
        var: create_vm

    ########################################################################
    # 2) EXEMPLE : BACKUP de la VM via la commande vzdump
    ########################################################################
    - name: Sauvegarder la VM avec vzdump
      ansible.builtin.shell: |
        vzdump {{ vmid }} \
          --node {{ node }} \
          --storage {{ backup_storage }} \
          --mode {{ backup_mode }} \
          --compress {{ backup_compress }} \
          --remove {{ remove_backup }}
      register: backup_result

    - name: Afficher le résultat du backup
      debug:
        var: backup_result.stdout_lines

    ########################################################################
    # 3) (Optionnel) TROUVER LE FICHIER DE BACKUP GÉNÉRÉ
    ########################################################################
    - name: Lister les backups générés dans le stockage
      ansible.builtin.command: |
        ls -1 /mnt/{{ backup_storage }}/dump/ | grep "qemu-{{ vmid }}"
      register: backup_files
      changed_when: false  # On ne considère pas cette tâche comme un changement

    - name: Afficher la liste des backups trouvés
      debug:
        var: backup_files.stdout_lines

    ########################################################################
    # 4) EXEMPLE : RESTAURER LE BACKUP (pour créer une NOUVELLE VM)
    ########################################################################
    - name: Restaurer la VM sur un nouvel ID
      ansible.builtin.shell: |
        qmrestore /mnt/{{ backup_storage }}/dump/{{ backup_files.stdout_lines[-1] }} \
          {{ restore_new_vmid }} \
          --storage {{ restore_storage }}
      when: backup_files.stdout_lines is defined and backup_files.stdout_lines|length > 0
      register: restore_result

    - name: Afficher le résultat de la restauration
      debug:
        var: restore_result.stdout_lines
      when: restore_result is defined

    ########################################################################
    # 5) (Optionnel) CRÉER UN SNAPSHOT sur la VM originale (via API Token)
    ########################################################################
    - name: Créer un snapshot sur la VM d'origine
      community.general.proxmox:
        api_host: "{{ proxmox_host }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        node: "{{ node }}"
        vmid: "{{ vmid }}"
        snapshot: "snapshot_apres_backup"
        state: snapshot
      delegate_to: localhost
      register: snapshot_result

    - name: Afficher le résultat du snapshot
      debug:
        var: snapshot_result
